// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @default("новая роль")
  color       String   @default("#fff")
  permissions String[] @default([])
  isDefault   Boolean  @default(false)
  order       Int?      @default(autoincrement())

  memberships ServerMembership[]
  Server      Server?            @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId    Int
}

model ServerMembership {
  id             Int      @id @default(autoincrement())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  server         Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
  roles          Role[]
  joinedServer   DateTime @default(now())
  isOwner        Boolean?
  userServerName String?
  isServerMuted  Boolean  @default(false)
  isServerDeafen Boolean  @default(false)

  userId    Int
  serverId  Int
  channel   Channel? @relation(fields: [channelId], references: [id])
  channelId Int?

  @@unique([userId, serverId])
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String  @unique
  login    String  @unique
  password String  @db.VarChar(255)
  avatar   String?

  approveCode     String? @unique @db.VarChar(255)
  forgotPassCode  String? @unique @db.VarChar(255)
  isEmailApproved Boolean @default(false)

  bio         String?
  isOnline    Boolean @default(false)
  isMuted     Boolean @default(false)
  isDeafen    Boolean @default(false)
  isStreaming Boolean @default(false)
  nickname    String

  friends  User[] @relation("friends")
  friendOf User[] @relation("friends")

  friendsIncomingRequests   User[] @relation("friendsIncomingRequests")
  friendsIncomingRequestsOf User[] @relation("friendsIncomingRequests")

  friendsOutgoingRequests   User[] @relation("friendsOutgoingRequests")
  friendsOutgoingRequestsOf User[] @relation("friendsOutgoingRequests")

  RefreshToken      RefreshToken[]
  Message           Message[]
  channels          Channel[]          @relation("ChannelUsers")
  serverMemberships ServerMembership[]
  Server            Server?            @relation(fields: [serverId], references: [id])
  serverId          Int?
}

model Server {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  avatar             String?
  name               String
  users              ServerMembership[]
  categories         Category[]
  userId             Int?
  connectServerLinks String[]           @default([])

  bannedUsers User[]
  roles       Role[]
}

model Category {
  id       Int       @id @default(autoincrement())
  channels Channel[]
  name     String
  server   Server?   @relation(fields: [serverId], references: [id])
  serverId Int?
}

model Channel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users    User[]    @relation("ChannelUsers")
  messages Message[]

  name            String?
  isServerChannel Boolean?
  isVoice         Boolean?
  isText          Boolean?
  isGroup         Boolean            @default(false)
  isActiveCall    Boolean            @default(false)
  usersInCall     ServerMembership[]
  callStart       DateTime?
  serverId        Int?
  categoryId      Int?
  category        Category?          @relation(fields: [categoryId], references: [id])
  userId          Int?
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content        String
  repliedMessage Message?  @relation("RepliedMessages", fields: [messageId], references: [id])
  replies        Message[] @relation("RepliedMessages")
  author         User      @relation(fields: [userId], references: [id])
  isEdited       Boolean   @default(false)
  files          String[]  @default([])

  channel   Channel? @relation(fields: [channelId], references: [id])
  channelId Int?
  userId    Int
  messageId Int?
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  token     String   @unique
}
